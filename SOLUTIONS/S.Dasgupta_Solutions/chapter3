3.1
A->B is a tree edge
B->C is a tree edge
C->F is a tree edge
F->E is a tree edge
F->I is a tree edge
E->B is a back edge
E->A is a back edge
prev = [0, 1, 2, -1, 4, 3, -1, -1, 6]
post = 11, 10, 9, -1, 5, 8, -1, -1, 7]

D->G is a tree edge
G->H is a tree edge
H->D is a back edge
prev = [0, 1, 2, 12, 4, 3, 13, 14, 6]
post = [11, 10, 9, 17, 5, 8, 16, 15, 7] 

3.2
(a)
A->B is a tree edge
B->C is a tree edge
C->D is a tree edge
D->B is a back edge
D->H is a tree edge
H->G is a tree edge
G->F is a tree edge
F->E is a tree edge
A->F is a forward edge
B->E is a forward edge
E->G is a backward edge
E->D is a backward edge
prev = [0, 1, 2, 3, 7, 6, 5, 4]
post = [15, 14, 13, 12, 8, 9, 10, 11]
(b) 
Do I really want to do this? I think I grasp this point already

3.3
(a) Not sure what the dfs based topo algo is .Oh got it, sort in decreasing
    order of post values.
    B,A,C,E,D,F,H,G... Yay!
    prev = [0, 14, 1, 2, 10, 3, 4, 6, -1]
    post = [13, 15, 12, 9, 11, 8, 5, 7, -1]

(b) A and B are the sources, G and H are the sinks
(c) (A/B)->C->(D/E)->F->(G/H)
(d) it has 8 possible topological orderings

3.4
(a) C,D,F,J then G,I,H then A then B then E. 
(b) source SCCs are B and E. sink is the component formed by C,D,F,J
(c) Done :)
(d) 2 edges.. basically you need to remove the sources and sink

3.5
def reverseGraph(G, u):
    for v in G[u]:
        if u not in RG[v]:  # don't think this is linear time, if I have to search
            RG[v].append(u)  # make the parent the child in the reversed Graph
            reverseGraph(G, v)
I can also do this by extracting all the edges,
reversing them and constructing an adjacency representation again.

3.6
(a) every edge represents an addition to the
    in and out degree
(b) it is obvious? even+ odd*even = even
(c)

3.7
(a) do a dfs but mark each node as belonging to v1 or v2
    def dfs(G,u,c):
        if colour[u]== -1:  # not coloured
            colour[u] = c
        elif colour[u]!=c:
            return False # graph is not bipartite  
        for v in G[u]:
            ans&=dfs(G,v, not(color))
        return ans

(b) if it has a cycle of odd length.. then 0-1-0-1
(c) 3 colours?

3.8
10,7,4 - exactly 2 pints in 7 or 4 container. 10 - 4 put in the 7 pint container. 
then fill the 4 pint container from the 6 pints in the 7 container.
2 pints in the 7 container. 
(a) if there is a path that has a distance of exactly 2?
(b)
(c)

3.9
visited[u]=True
ans = 0
for v in G[u]:
    if not visited[v]:
        dfs(G, v)
        ans+=len(G[v])
twodegree[u] = ans

3.10
def dfs(G,u):
    visited = [False]*n
    stack = [u]
    clock = 0
    prev[u] = clock
    clock+=1
    while stack:
        u = stack.pop(-1)
        visited[u] = True
        post[u] = clock
        clock+=1
        for v in G[u]:
            if not visited[v]:
                stack.append(v)
                prev[v]= clock
                clock+=1

3.11
Check if there is a back edge that goes from v to e.
You can read this off the post array.

3.12
post(u)<post(v)
post[u] gives us the time a node leaves the stack.
In a tree all the nodes are traversed and backtracked
first in , last out -- basically.

3.13
(a) in the DFS search tree.. hmm
(b) a graph connected in a circle?
(c) basically any example, since there won't path between 
    nodes in different components in the reverse direction

3.14 First you need to keep track of the number of nodes, directed
    at a node. 
    Then get a list of nodes with 0. then add to the linearized
    graph. then reduce all the innodes of it's neighbors by one.
    each node is treated exactly once and we have m operations
    to reduce the innodes. O(m+n)

3.15 
(a) This is exactly the same as the problem of finding out if the
    graph is composed of just one strongly connected component.
(b) How is this weaker though? can't I just use the town hall as 
    a stop on the way to another point? I get it.. the graph might
    have nodes not reachable from the town hall in the first place.
    Basically do a dfs starting from the town hall and see if it forms
    a strongly connected component.

3.16  
    You need to find the longest path in the dag from source to sink.
    it is definitely a dag since you can't have circular dependencies
    in the course list. Hm.. just do a dfs? and keep track of the distance
    from a source. 

3.17

3.18 
    simply do pre[u]<prev[v]<post[v]<prev[u] - tree and forward edge. In every other
    case, u is not an ancestor of v.

3.19
    z . Get to the leaf and save the x value. then compare the returned x values of its descendants.
    def dfs(G,u):
        visited[u] = True
        maxleaf = -float('inf')
        for v in G[u]:
            maxleaf = max(maxleaf,dfs(G, v))
        z[u] = maxleaf
        return maxleaf

3.20

3.21
    colour the nodes as they are visited? if you have a backedge and are 
    forced to color it the opposite color then it has odd length

3.22
    Bfs/dfs from every edge and check if every node was visited.
    find the strongly connected component and linearise. this node
    must be a source... do the dfs in the reverse graph. use it to
    find the greatest post number.. would let us know a source

3.23
    Do a dfs or a bfs. Basically, s->t and count the number of times, the 
    algo reaches t
    def dfs(G,u):
        visited[u] = True
        if u == t:
            return 1
        for v in G[u]:
            count += dfs(G,v)
        return count

3.24
    use a dfs to try all paths.. once there is no place to visit.
    Count the number of vertices in the path

3.25
     topo sort. work backwards and do min(cost[u]) for its neighbors

3.26

3.27

3.28

3.29
    
